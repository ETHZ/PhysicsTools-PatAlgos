### Let's start with all modules here, then we split them



module allLayer0Muons = PATMuonCleaner {
  InputTag muonSource        = muons                   # reco muon input source
}

module allLayer0Electrons = PATElectronCleaner {
  InputTag electronSource    = pixelMatchGsfElectrons   # reco electron input source

  ### duplicate removal configurables
  bool     removeDuplicates  = true                     # switch on/off electron duplicate removal (1 SC with 2 tracks and vice versa)

  ### selection (e.g. ID)
  PSet     selection = { string type = "none" }
}

module allLayer0Photons = PATBasePhotonCleaner {
  InputTag photonSource     = photons

  string   removeDuplicates = "bySeed"

  string   removeElectrons  = "bySeed"
  InputTag electrons        = allLayer0Electrons
}

module allLayer0Taus = PATPFTauCleaner {
  InputTag tauSource              = pfRecoTauProducer
  InputTag tauDiscriminatorSource = pfRecoTauDiscriminationByIsolation
#  InputTag tauSource              = caloRecoTauProducer
#  InputTag tauDiscriminatorSource = caloRecoTauDiscriminationByIsolation
}


module allLayer0Jets = PATCaloJetCleaner {

  InputTag jetSource               = iterativeCone5CaloJets      # uncalibrated reco jet input source

  VPSet removeOverlaps = {
      { // discard jets that match with clean electrons
          InputTag collection = allLayer0Electrons   # FIXME: plug isolation in between?
          double   deltaR     = 0.3                  #        TQAF used a tracker isolation cut at 2
      }
      //,{   # discard jets that match with Taus. Off, as it was not there in TQAF
      //    InputTag collection = allLayer0Taus
      //    double   deltaR     = 0.3
      //}
      //,{   # discard jets that match with Photons. Off, as it was not there in TQAF
      //    InputTag collection = allLayer0Photons
      //    double   deltaR     = 0.3
      //}
  }
  
}

module allLayer0METs = PATCaloMETCleaner {
    InputTag metSource = corMetType1Icone5
}

sequence patLayer0Cleaners =           { allLayer0Muons, allLayer0Electrons, allLayer0Photons, allLayer0Jets, allLayer0METs}
sequence patLayer0Cleaners_withPFTau = { allLayer0Muons, allLayer0Electrons, allLayer0Photons, allLayer0Taus, allLayer0Jets, allLayer0METs }


# perform additionally needed high level reco tasks needed before Layer0 cleaners
include "PhysicsTools/PatAlgos/data/PATBeforeLevel0Reco.cff"
# perform additionally needed high level reco tasks used after Layer0 cleaners
include "PhysicsTools/PatAlgos/data/PATHighLevelReco.cff"

# perform MC matching
include "PhysicsTools/PatAlgos/data/MCTruth.cff"

sequence patLayer0 =           { patBeforeLevel0Reco, patLayer0Cleaners, patHighLevelReco, patMCTruth }
sequence patLayer0_withPFTau = { patBeforeLevel0Reco, patLayer0Cleaners_withPFTau, patHighLevelReco, patMCTruth_withTau }

