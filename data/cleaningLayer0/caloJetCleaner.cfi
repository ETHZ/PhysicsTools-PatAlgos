module allLayer0Jets = PATCaloJetCleaner {

  InputTag jetSource               = iterativeCone5CaloJets      # uncalibrated reco jet input source

  PSet removeOverlaps = {
      PSet electrons = { // discard jets that match with clean electrons
          InputTag collection = allLayer0Electrons    # 
          double   deltaR     = 0.3                   #
          string   cut        = "pt > 10"             # as in LeptonJetIsolationAngle
          vstring  flags      = {"Isolation/Tracker"} # request the item to be marked as isolated in the tracker
                                                      # from the PATElectronCleaner
      }

      PSet taus = { }
      //PSet taus = {   # discard jets that match with Taus. Off, as it was not there in TQAF
      //    InputTag collection = allLayer0Taus
      //    double   deltaR     = 0.3
      //}

      PSet photons = { }
      //PSet photons = {   # discard jets that match with Photons. Off, as it was not there in TQAF
      //    InputTag collection = allLayer0Photons
      //    double   deltaR     = 0.3
      //}
    
      //PSet muons = { } // supported, but it's not likely you want it
      //PSet jets  = { } // same as above   
 
      VPSet user    = { }
  }
  
  ### selection
  PSet     selection = { 
     string type    = "none"
     # --- example with JetID ---
     # string type    = "JetID"  # options: none, JetID, custom
     # InputTag IDmap = JetID    # ValueMap<double> name, result of any JetID-tool
     # double value   = 0.       # if the jet's ID result, which is stored in IDmap, is greater than value then the jet is selected
  }
  

  bool    markItems    = true  // write the status flags in the output items
  string  saveRejected = "Bad" // set this to a non empty label to save the list of items which fail
  string  saveAll      = ""    // set this to a non empty label to save a list of all items both passing and failing
  vstring bitsToIgnore = {}    // You can specify some bit names, e.g. "Overflow/User1", "Core/Duplicate", "Isolation/All".
  untracked bool wantSummary = true // print summary information for each status flag
}
