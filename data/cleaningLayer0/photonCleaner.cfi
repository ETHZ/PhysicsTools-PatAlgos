module allLayer0Photons = PATBasePhotonCleaner {
  InputTag photonSource     = photons

  string   removeDuplicates = "none" 
  string   removeElectrons  = "none" // FIXME: "BySeed" in one of the two 'removeXyz' throws exception of bad ref.
  InputTag electrons        = allLayer0Electrons

  bool    markItems    = true // write the status flags in the output items
  string  saveRejected = ""   // set this to a non empty label to save the list of items which fail
  string  saveAll      = ""   // set this to a non empty label to save a list of all items both passing and failing
  vstring bitsToIgnore = {    // You can specify some bit names, e.g. "Overflow/User1", 
        "Isolation/All"       //   "Core/Duplicate", "Isolation/All".
  }
  untracked bool wantSummary = true // print summary information for each status flag

  PSet isolation = {
  /*   PSet tracker = {
        InputTag src    = patAODPhotonIsolations:egammaPhotonTkDeposits
        double   deltaR = 0.3
        vstring  vetos  = { "Threshold(1.5)" }
        bool     skipDefaultVeto = true
        double   cut    = 5
     }
     PSet hcal = {
        InputTag src    = patAODPhotonIsolations:egammaPhotonTowersDeposits
        double   deltaR = 0.3
        double   cut    = 3
     }
     PSet ecal = {
        InputTag src    = patAODPhotonIsolations:egammaPhotonEcalDeposits
        double   deltaR = 0.3
        double   cut    = 5
     }
  */
  }
  
}
