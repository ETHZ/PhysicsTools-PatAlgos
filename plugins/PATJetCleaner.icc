#include "PhysicsTools/PatAlgos/plugins/PATJetCleaner.h"
#include "DataFormats/Common/interface/ValueMap.h"

template<typename JetIn, typename JetOut>
pat::PATJetCleaner<JetIn,JetOut>::PATJetCleaner(const edm::ParameterSet & iConfig):
  jetSrc_(iConfig.getParameter<edm::InputTag>( "jetSource" )),
  helper_(jetSrc_),
  selectionCfg_(iConfig.getParameter<edm::ParameterSet>("selection"))
{
  // produces vector of electrons
  produces<std::vector<JetOut> >();
  // producers also backmatch to the electrons
  produces<reco::CandRefValueMap>();

  if (iConfig.exists("JetLikelihoodRejector")) {
    likelihoodRej_   = iConfig.getParameter<edm::InputTag>("JetLikelihoodRejector");
    doLikelihoodRej_ = true;
  } 
  else 
    doLikelihoodRej_ = false;
  
  if (iConfig.exists("removeOverlaps")) {
    overlapHelper_ = pat::helper::OverlapHelper(iConfig.getParameter< std::vector<edm::ParameterSet> >("removeOverlaps"));
  } 
  

  selector_ = std::auto_ptr<JetSelectorType >( 
                                              new JetSelectorType( fillSelection_(selectionCfg_) ) 
                                              );
}


template<typename JetIn, typename JetOut>
pat::PATJetCleaner<JetIn,JetOut>::~PATJetCleaner() {
}


template<typename JetIn, typename JetOut>
void pat::PATJetCleaner<JetIn,JetOut>::produce(edm::Event & iEvent, const edm::EventSetup & iSetup) {     
  // start a new event
  helper_.newEvent(iEvent);

  typedef typename edm::Ref< std::vector<JetIn> > JetInRef;
  for (size_t idx = 0, size = helper_.srcSize(); idx < size; ++idx) {
    // read the source jet
    const JetIn & srcJet = helper_.srcAt(idx);

    // clone the jet and convert it to the new type
    JetOut ourJet = static_cast<JetOut>(srcJet);
 
    // perform the selection
    edm::Handle<pat::JetValueMap> LikelihoodRection;
    if (doLikelihoodRej_)
      iEvent.getByLabel(likelihoodRej_, LikelihoodRection); 
    if ( selector_->filter(idx,helper_.source(), &(*LikelihoodRection) ) ) continue;

    // write the jet
    helper_.addItem(idx, ourJet);
  }

  if (overlapHelper_.enabled()) {
     typedef typename pat::helper::OverlapHelper::Result Result;
     std::auto_ptr<Result> result = overlapHelper_.test( iEvent, helper_.selected() );
     for (size_t i = 0, n = helper_.size(); i < n; ++i) {
        helper_.setMark( i, (*result)[i] );
     }
  }

  helper_.done();
 
}



template<typename JetIn, typename JetOut>
const pat::JetSelection
pat::PATJetCleaner<JetIn,JetOut>::fillSelection_( const edm::ParameterSet & cfg)
{

  // Fill selector struct here: I'm not able to do it in the ParameterAdapter
  JetSelection config_;

  config_.selectionType = cfg.getParameter<std::string>("type");;
  if ( config_.selectionType == "JetMETLikelihood" )
    config_.value = cfg.template getParameter<double>("value");
  else
    config_.value = -1;

  if ( config_.selectionType == "custom" ) {
    config_.EMFmin                 = cfg.getParameter<double>("EMFmin");
    config_.EMFmax                 = cfg.getParameter<double>("EMFmax");
    config_.Etamax                 = cfg.getParameter<double>("Etamax");
    config_.Ptmin                  = cfg.getParameter<double>("Ptmin");
    config_.EMvsHadFmin            = cfg.getParameter<double>("EMvsHadFmin");
    config_.EMvsHadFmax            = cfg.getParameter<double>("EMvsHadFmax");
    config_.HadFmin                = cfg.getParameter<double>("HadFmin");
    config_.HadFmax                = cfg.getParameter<double>("HadFmax");
    config_.N90min                 = cfg.getParameter<double>("N90min");
    config_.N90max                 = cfg.getParameter<double>("N90max");
    config_.NCaloTowersmin         = cfg.getParameter<double>("NCaloTowersmin");
    config_.NCaloTowersmax         = cfg.getParameter<double>("NCaloTowersmax");
    config_.HighestTowerOverJetmin = cfg.getParameter<double>("HighestTowerOverJetmin");
    config_.HighestTowerOverJetmax = cfg.getParameter<double>("HighestTowerOverJetmax");
    config_.RWidthmin              = cfg.getParameter<double>("RWidthmin");
    config_.RWidthmax              = cfg.getParameter<double>("RWidthmax");
    config_.PtJetOverArea_min      = cfg.getParameter<double>("PtJetOverAreamin");
    config_.PtJetOverArea_max      = cfg.getParameter<double>("PtJetOverAreamax");
    config_.PtTowerOverArea_min    = cfg.getParameter<double>("PtTowerOverAreamin");
    config_.PtTowerOverArea_max    = cfg.getParameter<double>("PtTowerOverAreamax");
  }

  return config_;

}
