process TestTag2Map = {
    source = PoolSource { untracked vstring fileNames = { 'file:in.root' } }
    untracked PSet maxEvents =  { untracked int32 input = 20 }
    
    module cleanElectrons = PATElectronCleaner {
        InputTag electronSource   = pixelMatchGsfElectrons
        bool     removeDuplicates = true
    }


    module cleanJets = PATCaloJetCleaner {
        InputTag jetSource = iterativeCone5CaloJets

        VPSet removeOverlaps = {
            { // discard jets that match with clean electrons
              InputTag collection = cleanElectrons
              double   deltaR     = 0.3
            }
        }
    } 

    module convBtag = JetTagToValueMapFloat {
        InputTag src  = iterativeCone5CaloJets
        InputTag tags = jetProbabilityJetTags
    }

    module skimBtag = CandValueMapSkimmerFloat {
        InputTag collection  = cleanJets
        InputTag association = convBtag:jetProbabilityJetTags
        InputTag backrefs    = cleanJets
    }
    module refTestAnalyzer = RefTestAnalyzer {
        InputTag jets0   = iterativeCone5CaloJets
        InputTag jets1   = cleanJets
        InputTag jtag    = jetProbabilityJetTags
        InputTag btag    = convBtag:jetProbabilityJetTags
        InputTag newbtag = skimBtag 
        InputTag backmap = cleanJets
    }

    path p = {  cleanElectrons, cleanJets, convBtag, skimBtag, 
                refTestAnalyzer }

}
