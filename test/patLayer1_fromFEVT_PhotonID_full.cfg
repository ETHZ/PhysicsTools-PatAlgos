process PAT = {


  ### General ###

  # initialize MessageLogger
  include "FWCore/MessageLogger/data/MessageLogger.cfi"
  replace MessageLogger.cerr.threshold = "INFO"
  replace MessageLogger.categories += "PATLayer0Summary"
  replace MessageLogger.cerr.INFO = {
      untracked PSet default = { untracked int32 limit = 0  }
      untracked PSet PATLayer0Summary = { untracked int32 limit = -1 }
  }

  # return filter & timing reports
  untracked PSet options = { untracked bool wantSummary = true }


  ### Input ###

  untracked PSet maxEvents = { untracked int32 input = 100 }

  source = PoolSource { untracked vstring fileNames = { 'file:/afs/cern.ch/cms/PRS/top/cmssw-data/relval200-for-pat-testing/FullSimTTbar-210p5.1-ALL.100.root' } }

  ### PAT steering ###

  include "PhysicsTools/PatAlgos/data/patLayer0.cff"
#include "PhysicsTools/PatAlgos/test/patLayer0_ReplaceDefaults_full.cff"
  include "PhysicsTools/PatAlgos/data/patLayer1.cff"
#include "PhysicsTools/PatAlgos/test/patLayer1_ReplaceDefaults_full.cff"

  module patAODphotonID = PhotonIDProd from "RecoEgamma/PhotonIdentification/data/photonId.cfi"
  replace patAODphotonID.photonProducer           = "allLayer0Photons"   // directly identify output from Layer 0
  replace patAODphotonID.photonIDAssociationLabel = "PhotonAssociatedID" // to be sure, in case the default in the cfi gets changed
  module layer0PhotonID = PhotonIDConverter {
    InputTag src      = allLayer0Photons
    InputTag photonID = patAODphotonID:PhotonAssociatedID
    
  }
  sequence patPhotonID = { patAODphotonID, layer0PhotonID }
  replace allLayer1Photons.addPhotonID    = true
  replace allLayer1Photons.photonIDSource = layer0PhotonID

  module content = EventContentAnalyzer {}
  path p = {
    patLayer0,
    patPhotonID,
    content,
    patLayer1
  }


  ### Output ###

  # define the event content
  block patEventContent = {
    untracked vstring outputCommands = {
      "drop *"
    }
  }
  include "PhysicsTools/PatAlgos/data/patLayer1_EventContent.cff"
  replace patEventContent.outputCommands += patLayer1EventContent.outputCommands

  # only accept events passing the complete path
  block patEventSelection = {
    untracked PSet SelectEvents = {
      vstring SelectEvents = { "p" }
    }
  }

  # the actual output module
  module out = PoolOutputModule {
    untracked string fileName = "PATLayer1_Output.fromFEVT_PhotonID_full.root"
    using patEventSelection
    using patEventContent
    untracked bool verbose = false
  }

  endpath outpath = { out }


}
