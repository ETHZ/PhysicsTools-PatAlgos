process PAT = {


  ### General ###

  # initialize MessageLogger
  include "FWCore/MessageLogger/data/MessageLogger.cfi"
  replace MessageLogger.cerr.threshold = "INFO"
  replace MessageLogger.categories += "PATLayer0Summary"
  replace MessageLogger.cout = {
        untracked string threshold = "INFO"
        untracked PSet INFO =             { untracked int32 limit = 0  }
        untracked PSet PATLayer0Summary = { untracked int32 limit = -1 }
  }


  # return filter & timing reports
  untracked PSet options = { untracked bool wantSummary = true }


  ### Input ###

  untracked PSet maxEvents = { untracked int32 input = 100 }



  ### PAT steering ###

  include "PhysicsTools/PatAlgos/test/boostrapWithFamos.cff"
  include "PhysicsTools/PatAlgos/test/PATFamosSequences.cff"
  include "PhysicsTools/PatAlgos/data/PATLayer0.cff"
  include "PhysicsTools/PatAlgos/test/PATLayer0_ReplaceDefaults_fast.cff"
  // when not using the replaces, you need the following instead
  // include "PhysicsTools/PatAlgos/test/PATLayer0_FamosSetup.cff"

  path p = {
    famosWithEverythingPAT,
    patLayer0
  }


  ### Output ###

  # define the event content
  block patEventContent = {
    untracked vstring outputCommands = {
      "keep *"
    }
  }
  include "PhysicsTools/PatAlgos/test/PATLayer0_EventContent.cff"
  replace patEventContent.outputCommands += patLayer0EventContent.outputCommands

  # only accept events passing the complete path
  block patEventSelection = {
    untracked PSet SelectEvents = {
      vstring SelectEvents = { "p" }
    }
  }

  # the actual output module
  module out = PoolOutputModule {
    untracked string fileName = "PATLayer0_Output.root"
    using patEventSelection
    using patEventContent
    untracked bool verbose = false
  }

  endpath outpath = { out }


}
